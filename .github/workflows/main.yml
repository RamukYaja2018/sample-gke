name: CI/CD to GKE

on:
  push:
    branches:
      - main # Trigger on pushes to the main branch
  pull_request:
    branches:
      - main # Optional: Trigger on pull requests for CI checks

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GKE_CLUSTER: ${{ secrets.GKE_CLUSTER_NAME }}
  GKE_ZONE: ${{ secrets.GCP_REGION }} # Use GKE_ZONE for regional clusters if needed, or GKE_REGION
  GAR_REGION: ${{ secrets.GCP_REGION }}
  GAR_REPO: ${{ secrets.GAR_REPO_NAME }}
  IMAGE_NAME: my-app # Your application's image name
  DEPLOYMENT_NAME: my-app-deployment # Name of your Kubernetes Deployment

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: 'read'
      id-token: 'write' # Required for Workload Identity Federation

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        id: auth
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT_EMAIL }}

      - name: Set up gcloud CLI and configure Docker for Artifact Registry
        run: |
          gcloud config set project $PROJECT_ID
          gcloud auth configure-docker $GAR_REGION-docker.pkg.dev

      - name: Build and Tag Docker Image
        run: |
          docker build -t $GAR_REGION-docker.pkg.dev/$PROJECT_ID/$GAR_REPO/$IMAGE_NAME:$GITHUB_SHA \
                     -t $GAR_REGION-docker.pkg.dev/$PROJECT_ID/$GAR_REPO/$IMAGE_NAME:latest \
                     .

      - name: Push Docker Image to Artifact Registry
        run: |
          docker push $GAR_REGION-docker.pkg.dev/$PROJECT_ID/$GAR_REPO/$IMAGE_NAME:$GITHUB_SHA
          docker push $GAR_REGION-docker.pkg.dev/$PROJECT_ID/$GAR_REPO/$IMAGE_NAME:latest

      - name: Get GKE Credentials
        uses: google-github-actions/get-gke-credentials@v2
        with:
          cluster_name: ${{ env.GKE_CLUSTER }}
          location: ${{ env.GKE_ZONE }} # Use GKE_ZONE for regional clusters, or location for zonal

      - name: Deploy to GKE
        run: |
          # Update the image in the deployment manifest
          # This uses 'sed' to replace the image placeholder with the actual image tag.
          # Make sure the image name in deployment.yaml matches the placeholder:
          # image: <YOUR_GCP_REGION>-docker.pkg.dev/<YOUR_PROJECT_ID>/<YOUR_ARTIFACT_REGISTRY_REPO_NAME>/my-app:latest
          # The 's@...@...' syntax is used to avoid issues with slashes in the image path.
          sed -i "s@<YOUR_GCP_REGION>-docker.pkg.dev/<YOUR_PROJECT_ID>/<YOUR_ARTIFACT_REGISTRY_REPO_NAME>/my-app:latest@${GAR_REGION}-docker.pkg.dev/${PROJECT_ID}/${GAR_REPO}/${IMAGE_NAME}:${GITHUB_SHA}@" deployment.yaml

          # Apply the Kubernetes manifests
          kubectl apply -f deployment.yaml
          kubectl apply -f service.yaml

          # Optional: Verify deployment
          kubectl rollout status deployment/${DEPLOYMENT_NAME}
          kubectl get service my-app-service # Check your service name if different
